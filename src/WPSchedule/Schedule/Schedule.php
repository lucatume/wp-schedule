<?php


	class WPSchedule_Schedule_Schedule extends WPSchedule_Schedule_AbstractSchedule {

		public function isScheduled( $hook, $args = null ) {
			return wp_next_scheduled( $hook, $args );
		}

		public function schedule( WPSchedule_Time_TimeInterface $activation_time, WPSchedule_Interval_IntervalInterface $recurrence_interval, $hook, array $args = null ) {
//			$this->checkHook( $hook );
			if ( ! is_string( $hook ) || empty( $hook ) ) {
				throw new Exception( 'Hook name must be a non empty string' );
			}


			wp_schedule_event( $activation_time->getTime(), $recurrence_interval->getInterval(), $hook, $args );
		}

		public function clear_schedule( $hook, array $args = null ) {
			$this->checkHook( $hook );

			parent::clear_schedule( $hook, $args ); // TODO: Change the autogenerated stub
		}

		public function schedule_single_event( WPSchedule_Time_TimeInterface $activation_Time, $hook, array $args = null ) {
			$this->checkHook( $hook );

			parent::schedule_single_event( $activation_Time, $hook, $args ); // TODO: Change the autogenerated stub
		}

		public function reschedule( WPSchedule_Time_TimeInterface $activation_Time, WPSchedule_Interval_IntervalInterface $recurrence_Interval, $hook, array $args = null ) {
			$this->checkHook( $hook );

			parent::reschedule( $activation_Time, $recurrence_Interval, $hook, $args ); // TODO: Change the autogenerated stub
		}

		private function checkHook( $hook ) {
			Arg::_( $hook, "Hook name" )->is_string()
			   ->assert( ! empty( $hook ), 'Hook name must be a non emtpy string' );
		}


	}
